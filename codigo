#include <windows.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_LINE 512
#define MAX_REGISTROS 1000
#define NUM_ANIOS 10
#define ANIO_BASE 2012
#define NUM_MESES 12
#define ALTURA_MAX 22



typedef struct {
    char cuenca[50];
    char embalse[50];
    int mes;
    float volumen[NUM_ANIOS]; 
} Registro;

typedef struct {
    char cuenca[50];
    float suma_total;
    int conteo;
} CuencaInfo;

typedef struct {
    char **items;
    int count;
    int capacity;
} StringList;

typedef struct { 
    int anio;
    float lluvia_mm;
} Pluviometria;

typedef struct { 
    int anio;
    int mes; 
    float temperatura_media;
} Temperatura;

//Prototipos de las funciones
void init_string_list(StringList *list);
void add_to_list_if_unique(StringList *list, const char *value);
void free_string_list(StringList *list);
void mostrar_lista(StringList *list);
void quitar_comillas(char *cadena);
void buscar_volumen(Registro *registros, int num_registros, const char *cuenca, const char *embalse, int anio);
void comparar_con_otras_cuencas(Registro registros[], int num_registros, const char *cuenca_objetivo, const char *embalse_objetivo, int anio);
void media_anual_cuenca(Registro registros[], int num_registros, const char* cuenca, int anio);
void media_mensual_cuenca(Registro registros[], int num_registros, const char* cuenca, int anio, int mes);
void evolucion_del_volumen_de_la_cuenca(Registro registros[], int num_registros, const char *cuenca);
void diagrama_barras_evolucion_volumetrica_cuenca(Registro registros[], int num_registros, const char *cuenca);
void menu_funcionalidades();
void identificacion_sequia_abundancia_hidrica(Registro registros[], int num_registros, const char *cuenca, const char *embalse, int anio);
void mostrar_uso_agua_embalse(const char *cuenca, const char *embalse);
void cambio_de_cuenca(Registro registros[], int num_registros);
void mostrar_pluviometria_anual(Pluviometria datos[], int total_pluvio);
void mostrar_temperaturas_mensuales(Temperatura datos[], int total_temp, int anio);



void init_string_list(StringList *list) {
    list->capacity = 10;
    list->count = 0;
    list->items = malloc(list->capacity * sizeof(char*));
}

void add_to_list_if_unique(StringList *list, const char *value) {
    for (int i = 0; i < list->count; i++) {
        if (strcmp(list->items[i], value) == 0) return;
    }
    if (list->count >= list->capacity) {
        list->capacity *= 2;
        list->items = realloc(list->items, list->capacity * sizeof(char*));
    }
    list->items[list->count++] = strdup(value);
}

void free_string_list(StringList *list) {
    for (int i = 0; i < list->count; i++) {
        free(list->items[i]);
    }
    free(list->items);
}

void mostrar_lista(StringList *list) {
    for (int i = 0; i < list->count; i++) {
        char buffer[100];
        strncpy(buffer, list->items[i], sizeof(buffer));
        buffer[sizeof(buffer) - 1] = '\0';

        
        for (char *p = buffer; *p; p++) {
            if (*p == '_') *p = ' ';
        }

        printf("  [%d] %s\n", i + 1, buffer);
    }
}

void quitar_comillas(char *cadena) {
    size_t len = strlen(cadena);
    if (len > 0 && cadena[0] == '"') {
        memmove(cadena, cadena + 1, len);
        len--;
    }
    if (len > 0 && cadena[len - 1] == '"') {
        cadena[len - 1] = '\0';
    }
}




int leer_csv(const char *nombre_archivo, Registro registros[], int *num_registros) {
    FILE *fp = fopen(nombre_archivo, "r");
    if (!fp) {
        perror("No se pudo abrir el archivo");
        return 0;
    }

    char linea[MAX_LINE];
    fgets(linea, MAX_LINE, fp); 

    *num_registros = 0;
   
	while (fgets(linea, MAX_LINE, fp)) {
	    if (*num_registros >= MAX_REGISTROS) break;
	
	    Registro *r = &registros[*num_registros];
	    char *token = strtok(linea, ",");
	
	    quitar_comillas(token);
	    strncpy(r->cuenca, token, sizeof(r->cuenca));
	
	    token = strtok(NULL, ",");
	    quitar_comillas(token);
	    strncpy(r->embalse, token, sizeof(r->embalse));
	
	    token = strtok(NULL, ",");
	    quitar_comillas(token);
	    r->mes = atoi(token);
	
	    for (int i = 0; i < NUM_ANIOS; i++) {
	        token = strtok(NULL, ",");
	        if (token) {
	            quitar_comillas(token);
	            r->volumen[i] = atof(token);
	        } else {
	            r->volumen[i] = 0.0;
	        }
	    }

    (*num_registros)++;
}


    fclose(fp);
    return 1;
}

int leer_pluviometria(const char* nombre_archivo, Pluviometria datos[], int*total) {
FILE * f = fopen (nombre_archivo, "r"); 
if (!f) {
perror  ("No se puede abrir el archivo de pluviometria"); 
return 0; 
}

*total = 0; 
while (fscanf(f, "%d,%f", &datos[*total].anio, &datos[*total].lluvia_mm) == 2) {
(*total)++; 
}
fclose (f); 
return 1; 
}


int leer_temperaturas(const char* nombre_archivo, Temperatura datos[], int*total) {
FILE * f = fopen (nombre_archivo, "r"); 
if (!f) {
perror  ("No se puede abrir el archivo de temperaturas"); 
return 0; 
}

*total = 0; 
while (fscanf(f, "%d,%d, %f", &datos[*total].anio, &datos[*total].mes, &datos[*total].temperatura_media)== 3) {
(*total)++; 
}
fclose (f); 
return 1; 
}

void buscar_volumen(Registro *registros, int num_registros, const char *cuenca, const char *embalse, int anio) {
    int encontrado = 0;
    int index = anio - ANIO_BASE;

    if (index < 0 || index >= NUM_ANIOS) {
        printf("Anio fuera de rango (debe ser entre 2012 y 2021).\n");
        return;
    }

    for (int i = 0; i < num_registros; i++) {
        if (strcmp(registros[i].cuenca, cuenca) == 0 &&
            strcmp(registros[i].embalse, embalse) == 0) {
            printf("  Mes %d: %.2f\n", registros[i].mes, registros[i].volumen[index]);
            encontrado = 1;
        }
    }

    if (!encontrado) {
        printf("No se encontro ningun registro para esa combinacion.\n");
    }
}

void comparar_con_otras_cuencas(Registro registros[], int num_registros, const char *cuenca_objetivo, const char *embalse_objetivo, int anio) {
    int index = anio - ANIO_BASE;
    if (index < 0 || index >= NUM_ANIOS) {
        printf("Anio fuera de rango.\n");
        return;
    }

    float volumen_objetivo = 0.0;
    int encontrado = 0;

    
    for (int i = 0; i < num_registros; i++) {
        if (strcmp(registros[i].cuenca, cuenca_objetivo) == 0 &&
            strcmp(registros[i].embalse, embalse_objetivo) == 0) {
            volumen_objetivo += registros[i].volumen[index];
            encontrado = 1;
        }
    }

    if (!encontrado) {
        printf("No se encontro el embalse '%s' en la cuenca '%s' para el anio %d.\n", embalse_objetivo, cuenca_objetivo, anio);
        return;
    }
void mostrar_pluviometria_anual (Pluviometria datos[], int total) {
printf ("\nMedias anuales de Pluviometria: \n"); 
printf ("%-10s %-15s\n", "Año", "Lluvia (mm)");
for (int i = 0; i < total; i++) {
     	printf ("%-10d %-15.2f\n", datos[i].anio, datos[i].lluvia_mm); 
}
}

void mostrar_temperaturas_mensuales (Temperatura datos[], int total, int anio) {
printf ("\nTemperaturas mensuales del año %d: \n", anio);
const char* nombres_meses[NUM_MESES] = {"Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto" , "Septiembre", "Octubre" , "Noviembre", "Diciembre"};


printf ("%-12s %-15s\n", "Mes", "Temperatura(ºC)");
for (int i = 0; i < total; i++) {
	if (datos[i].anio == anio && datos [i].mes >= 1 && datos [i].mes <= 12){
     	printf ("%-12s %-15.2f\n", nombres_meses [datos[i].mes -1 ], datos[i].temperatura_media); 
}
}
}
    
    CuencaInfo cuencas[100];
    int num_cuencas = 0;

    for (int i = 0; i < num_registros; i++) {
        const char *cuenca = registros[i].cuenca;
        float volumen = registros[i].volumen[index];

        
        int j;
        for (j = 0; j < num_cuencas; j++) {
            if (strcmp(cuencas[j].cuenca, cuenca) == 0) break;
        }

        
        if (j == num_cuencas) {
            strncpy(cuencas[j].cuenca, cuenca, sizeof(cuencas[j].cuenca));
            cuencas[j].suma_total = 0.0;
            cuencas[j].conteo = 0;
            num_cuencas++;
        }

        cuencas[j].suma_total += volumen;
        cuencas[j].conteo++;
    }

    
    printf("\nComparacion de volumen total por cuenca para el anio %d:\n", anio);
    for (int i = 0; i < num_cuencas; i++) {
        printf("  %s: %.2f %s\n", cuencas[i].cuenca, cuencas[i].suma_total,
               strcmp(cuencas[i].cuenca, cuenca_objetivo) == 0 ? "<-- seleccionada" : "");
    }

    printf("\nVolumen total del embalse '%s' en cuenca '%s': %.2f\n",
           embalse_objetivo, cuenca_objetivo, volumen_objetivo);
}

void media_anual_cuenca(Registro registros[], int num_registros, const char* cuenca, int anio){
	int index = anio - ANIO_BASE;
	
	if (index < 0 || index >= NUM_ANIOS){
		printf("Anio fuera de rango.\n");
		return;
	}
	
	float suma = 0.0;
	int contador = 0;
	
	for (int i = 0; i < num_registros; i++){
		if(strcmp(registros[i].cuenca, cuenca) == 0){
			suma += registros[i].volumen[index];
			contador++;
		}
	}
	
	if (contador > 0){
	printf("\nLa media en el %d de la cuenca '%s': %.2f\n", anio, cuenca, suma / contador);
	}else{
		printf("\nNo hay datos para %d\n", anio);
	}
}

void media_mensual_cuenca(Registro registros[], int num_registros, const char* cuenca, int anio, int mes){
	int index = anio - ANIO_BASE;
	
	if (index < 0 || index >= NUM_ANIOS){
		printf("Anio fuera de rango.\n");
		return;
	}
	if (mes < 1 || mes > 12){
		printf("El mes debe de estar entre 1 y 12.\n");
		return;
	}
	
	float suma = 0.0;
	int contador = 0;
	
	for (int i = 0; i < num_registros; i++){
		if(strcmp(registros[i].cuenca, cuenca) == 0 && registros[i].mes == mes){
			suma += registros[i].volumen[index];
			contador++;
		}
	}
	const char* nombres_meses[NUM_MESES] = {"Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto", "Septiembre", "Octubre", "Noviembre", "Diciembre"};
	
	if (contador > 0){
	printf("\nLa media en %s de %d de la cuenca '%s': %.2f\n", nombres_meses[mes-1], anio, cuenca, suma / contador);
	}else{
		printf("\nNo hay datos para %s de %d\n", nombres_meses[mes-1], anio);
	}
}

void evolucion_del_volumen_de_la_cuenca(Registro registros[], int num_registros, const char *cuenca){
	printf("\nLa evolucion anual de la cuenca del %s es:\n", cuenca);
    for (int anio = 0; anio < NUM_ANIOS; anio++){
    	float suma = 0.0;
    	
    	for (int i = 0; i< num_registros; i++){
    		if (strcmp(registros[i].cuenca, cuenca) == 0){
    			suma += registros[i].volumen[anio];
			}
		}
		printf("En el %d, su volumen era: %10.2f\n", ANIO_BASE + anio, suma);
	}
}

void diagrama_barras_evolucion_volumetrica_cuenca(Registro registros[], int num_registros, const char *cuenca){
	float volumenes_anuales[NUM_ANIOS] = {0};
	
	for(int anio = 0; anio < NUM_ANIOS; anio++){
		for(int i = 0; i < num_registros; i++){
			if(strcmp(registros[i].cuenca, cuenca) == 0){
				volumenes_anuales[anio] += registros[i].volumen[anio];
			}
		}
	}
	
	float maximo = 0.0;
	
	for(int i = 0; i < NUM_ANIOS; i++){
		if(volumenes_anuales[i] > maximo){
			maximo = volumenes_anuales[i];
		}
	}
	printf("\nDiagrma de Barras de la evolucion volumetrica anual de la cuenca:\n");
	
	for(int nivel = ALTURA_MAX; nivel > 0; nivel--){
		float volumenes_nivelados = (maximo * nivel / ALTURA_MAX);
		printf("%6.1f | ", volumenes_nivelados);
		
		for(int anio = 0; anio < NUM_ANIOS; anio++){
			if (volumenes_anuales[anio] >= volumenes_nivelados){
				printf(" *** ");
			}
			else{
				printf("     ");
			}
		}
		printf("\n");
	}
	
	printf("       +-");
	
	for(int anio = 0; anio < NUM_ANIOS; anio++){
		printf("-----");
	}
	printf("\n         ");
	
	for(int anio = 0; anio < NUM_ANIOS; anio++){
		printf(" %4d", anio + ANIO_BASE);
	}
	printf("\n");
}

void menu_funcionalidades(){
	printf("\n\nEscoja una funcionalidad\n");
	printf("[1] Media anual del volumen de la cuenca del anio elegido: \n");
	printf("[2] Media mensual del volumen de la cuenca en el anio y mes elegidos: \n");
	printf("[3] Evolucion volumetrica de la cuenca a lo largo de los anios y su representacion con un diagrama de barras: \n");
	printf("[4] Volumen del embalse en el anio elegido: \n");
	printf("[5] Comparar con otras cuencas: \n");
	printf("[6] Identificar los periodos de sequia y abundancia hidrica de la cuenca: \n");
	printf("[7] Fucionalidad del agua del embalse escogido: \n");
	printf("[8] Ver pluviometria anual: \n");
	printf("[9] Ver temperatura mensual: \n");
	printf("[10] Seleccionar otra cuenca: \n");
	printf("[11] Salir\n");
	printf("Opcion: ");
}

void identificacion_sequia_abundancia_hidrica(Registro registros[], int num_registros, const char *cuenca, const char *embalse, int anio){
	printf("\nIdentificacion de sequia y abundancia hidrica del emblase '%s' de la cuenca '%s'' en el anio %d\n:", embalse, cuenca, anio);
	printf("\n%-12s %-8s %-8s %-15s\n", "Mes", "Actual", "Media", "Estado");
	
	
	const char *nombres_meses[NUM_MESES] = {"Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto", "Septiembre", "Octubre", "Noviembre", "Diciembre"};
	
	int index = anio - ANIO_BASE;
	if (index < 0 || index >= NUM_ANIOS){
		printf("Anio fuera de rango.\n");
		return;
	}
	
	int contador_sequia = 0;
	int contador_abundancia = 0;
	
	int mes;
	
	for (mes = 1; mes <= NUM_MESES; mes++){
		
		float volumen_actual = 0.0;
		int encontrado_actual = 0;
		
		int i = 0;
				
		while ( i < num_registros && encontrado_actual == 0){
			if(strcmp(registros[i].cuenca, cuenca) == 0 && strcmp(registros[i].embalse, embalse) == 0 && registros[i].mes == mes){
				volumen_actual = registros[i].volumen[index];
				encontrado_actual = 1;
			}
			i++;
		}
			
		if(encontrado_actual == 1){
			float suma_historica = 0.0;
			int conteo_historico = 0;
			int j;
			
			for (j = 0; j < num_registros; j++){
				if(strcmp(registros[j].cuenca, cuenca) == 0 && strcmp(registros[j].embalse, embalse) == 0 && registros [j].mes == mes){
					int anio;
					for (anio = 0; anio < NUM_ANIOS; anio++){
						suma_historica += registros[j].volumen[anio];
						conteo_historico++;
					}
				}
			}
			
			float media_historica = 0.0;
					
			if(conteo_historico > 0){
				media_historica = suma_historica / conteo_historico;
			}
			char estado_hidrico[15] = "Normal";
			char observacion[30] = "";
						
			if(media_historica >0){
					
				float diferencia = ((volumen_actual - media_historica) / media_historica) * 100;
					
				if(diferencia < -20.0){
					strcpy(estado_hidrico, "SEQUIA");
					contador_sequia++;
					contador_abundancia = 0;
				}
				else if(diferencia > 20.0){
					strcpy(estado_hidrico, "ABUNDANCIA");
					contador_abundancia++;
					contador_sequia = 0;
				}
				else{
					strcpy(estado_hidrico, "Normal");
					contador_sequia = 0;
					contador_abundancia = 0;
				}
					
				
				if (contador_sequia >= 3) {
					strcpy(observacion, "(Sequia prolongada)");
					contador_sequia = 0;
				}
				else if (contador_abundancia >= 3) {
					strcpy(observacion, "(Abundancia sostenida)");
	                contador_abundancia = 0;
	   			}
            } 
	            	
	            	
			if(media_historica > 0){
				printf("%-12s %-8.2f %-8.2f %-15s %s\n", nombres_meses[mes-1], volumen_actual, media_historica, estado_hidrico, observacion);
			}
			else{
				printf("%-12s %-8.2f %-8s %-15s\n", nombres_meses[mes-1], volumen_actual, "No hay datos", "Datos insuficientes");
			}
		}
		
		else{
			printf("%-12s %-8s %-8s %-15s\n", nombres_meses[mes-1], "No hay datos", "No hay datos", "Datos insuficientes");
		}
	}
}

// Función que hemos creado para leer y mostrar el uso del agua del embalse seleccionado
void mostrar_uso_agua_embalse(const char *cuenca, const char *embalse) {
    FILE *fp = fopen("uso del agua de los embalses.txt", "r");
    if (!fp) {
        perror("No se pudo abrir el archivo de usos del agua");
        return;
    }

    char linea[MAX_LINE];
    int encontrado = 0;
    
    printf("\nUso del agua para el embalse '%s' en la cuenca '%s':\n", embalse, cuenca);
    
    // Leer el archivo 
    while (fgets(linea, MAX_LINE, fp)) {
        char cuenca_archivo[50], embalse_archivo[50], uso[200];
        
        
        char *token = strtok(linea, ",");
        if (!token) continue;
        strncpy(cuenca_archivo, token, sizeof(cuenca_archivo));
        
        token = strtok(NULL, ",");
        if (!token) continue;
        strncpy(embalse_archivo, token, sizeof(embalse_archivo));
        
        token = strtok(NULL, "\n");
        if (!token) continue;
        strncpy(uso, token, sizeof(uso));
        
        
        // Comparar con la cuenca y embalse seleccionados
        if (strcmp(cuenca_archivo, cuenca) == 0 && strcmp(embalse_archivo, embalse) == 0) {
            printf("  - %s\n", uso);
            encontrado = 1;
        }
    }
    
    
    if (!encontrado) {
        printf("No se encontró información de uso del agua para este embalse.\n");
    }
    
    fclose(fp);
}
	
void cambio_de_cuenca(Registro registros[], int num_registros){
    
    for(int i=0; i<30; i++){
        printf("\n");
    }
        
    StringList cuencas;
    init_string_list(&cuencas);
    for (int i = 0; i < num_registros; i++) {
        add_to_list_if_unique(&cuencas, registros[i].cuenca);
    }

    printf("\nSeleccione una cuenca:\n");
    mostrar_lista(&cuencas);
    int seleccion_cuenca;
    printf("Opcion: ");
    scanf("%d", &seleccion_cuenca);
    getchar();
    if (seleccion_cuenca < 1 || seleccion_cuenca > cuencas.count) {
        printf("Seleccion invalida.\n");
        free_string_list(&cuencas);
        return;
    }
    char *cuenca_elegida = cuencas.items[seleccion_cuenca - 1];

    StringList embalses;
    init_string_list(&embalses);
    for (int i = 0; i < num_registros; i++) {
        if (strcmp(registros[i].cuenca, cuenca_elegida) == 0) {
            add_to_list_if_unique(&embalses, registros[i].embalse);
        }
    }

    printf("\nSeleccione un embalse en la cuenca '%s':\n", cuenca_elegida);
    mostrar_lista(&embalses);
    int seleccion_embalse;
    printf("Opcion: ");
    scanf("%d", &seleccion_embalse);
    getchar();
    if (seleccion_embalse < 1 || seleccion_embalse > embalses.count) {
        printf("Seleccion invalida.\n");
        free_string_list(&cuencas);
        free_string_list(&embalses);
        return;
    }
    char *embalse_elegido = embalses.items[seleccion_embalse - 1];

    int anio;
    printf("\nIngrese el anio (entre 2012 y 2021): ");
    scanf("%d", &anio);
    
    int mes;
    printf("\nIngrese el mes (de forma numerica): ");
    scanf("%d", &mes); 
    
    free_string_list(&cuencas);
    free_string_list(&embalses);
    
    return;    
}

void mostrar_pluviometria_anual(Pluviometria datos[], int total_pluvio) {
    printf("\nMedias anuales de Pluviometria: \n"); 
    printf("%-10s %-15s\n", "Anio", "Lluvia (mm)");
    for (int i = 0; i < total_pluvio; i++) {
        printf("%-10d %-15.2f\n", datos[i].anio, datos[i].lluvia_mm); 
    }
}

void mostrar_temperaturas_mensuales(Temperatura datos[], int total_temp, int anio) {
    printf("\nTemperaturas mensuales del año %d:\n", anio);
    const char* nombres_meses[NUM_MESES] = {
        "Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", 
        "Julio", "Agosto", "Septiembre", "Octubre", "Noviembre", "Diciembre"
    };

    printf("%-12s %-15s\n", "Mes", "Temperatura (ºC)");

    for (int mes = 1; mes <= NUM_MESES; mes++) {
        int encontrado = 0;
        for (int i = 0; i < total_temp; i++) {
            if (datos[i].anio == anio && datos[i].mes == mes) {
                printf("%-12s %-15.2f\n", nombres_meses[mes - 1], datos[i].temperatura_media);
                encontrado = 1;
                break; // ya se encontró ese mes, no seguir buscando
            }
        }
        if (!encontrado) {
            printf("%-12s %-15s\n", nombres_meses[mes - 1], "No hay datos");
        }
    }
}
	
int main() {
	SetConsoleOutputCP(65001);
    Registro registros[MAX_REGISTROS];
    int num_registros = 0;

    if (!leer_csv("dataset.csv", registros, &num_registros)) {
        printf("Error al leer el archivo.\n");
        return 1;
    }

   
    StringList cuencas;
    init_string_list(&cuencas);
    for (int i = 0; i < num_registros; i++) {
        add_to_list_if_unique(&cuencas, registros[i].cuenca);
    }

    printf("\nSeleccione una cuenca:\n");
    mostrar_lista(&cuencas);
    int seleccion_cuenca;
    printf("Opcion: ");
    scanf("%d", &seleccion_cuenca);
    getchar();
    if (seleccion_cuenca < 1 || seleccion_cuenca > cuencas.count) {
        printf("Seleccion invalida.\n");
        free_string_list(&cuencas);
        return 1;
    }
    char *cuenca_elegida = cuencas.items[seleccion_cuenca - 1];

    
    StringList embalses;
    init_string_list(&embalses);
    for (int i = 0; i < num_registros; i++) {
        if (strcmp(registros[i].cuenca, cuenca_elegida) == 0) {
            add_to_list_if_unique(&embalses, registros[i].embalse);
        }
    }

    printf("\nSeleccione un embalse en la cuenca '%s':\n", cuenca_elegida);
    mostrar_lista(&embalses);
    int seleccion_embalse;
    printf("Opcion: ");
    scanf("%d", &seleccion_embalse);
    getchar();
    if (seleccion_embalse < 1 || seleccion_embalse > embalses.count) {
        printf("Seleccion invalida.\n");
        free_string_list(&cuencas);
        free_string_list(&embalses);
        return 1;
    }
    char *embalse_elegido = embalses.items[seleccion_embalse - 1];

   
	   int anio;
	do {
	    printf("\nIngrese el anio (entre 2012 y 2021): ");
	    scanf("%d", &anio);
	    if (anio < ANIO_BASE || anio >= ANIO_BASE + NUM_ANIOS) {
	        printf("Anio invalido. Intente de nuevo.\n");
	    }
	} while (anio < ANIO_BASE || anio >= ANIO_BASE + NUM_ANIOS);
	
	int mes;
	do {
	    printf("\nIngrese el mes (de forma numerica, 1 a 12): ");
	    scanf("%d", &mes);
	    if (mes < 1 || mes > 12) {
	        printf("Mes invalido. Intente de nuevo.\n");
	    }
	} while (mes < 1 || mes > 12);

//Menú para seleccionar que funcionalidad quieres hacer
    int opcion;
    
    do{
    	menu_funcionalidades();
		scanf("%d", &opcion);
    	getchar();
    	
    	switch(opcion){
    		case 1:{
    			media_anual_cuenca(registros, num_registros, cuenca_elegida, anio);
    			break;
			}
			case 2:{
   				media_mensual_cuenca(registros, num_registros, cuenca_elegida, anio, mes);
   				break;
			}
			case 3:{
				evolucion_del_volumen_de_la_cuenca(registros, num_registros, cuenca_elegida);
   				diagrama_barras_evolucion_volumetrica_cuenca(registros, num_registros, cuenca_elegida);
				break;
			}
			case 4:{
				printf("\nVolumen de '%s' en '%s' para el anio %d:\n", embalse_elegido, cuenca_elegida, anio);
	    		buscar_volumen(registros, num_registros, cuenca_elegida, embalse_elegido, anio);
				break;
			}
			case 5:{
				comparar_con_otras_cuencas(registros, num_registros, cuenca_elegida, embalse_elegido, anio);
				break;
   			}	
			case 6:{
   				identificacion_sequia_abundancia_hidrica(registros, num_registros, cuenca_elegida, embalse_elegido, anio);
    			break;
   			}
			case 7:{
				mostrar_uso_agua_embalse(cuenca_elegida, embalse_elegido);
   				break;
   			}
			case 8:{
				Pluviometria pluviometrias[NUM_ANIOS];
                int total_pluvio = 0;
                if (leer_pluviometria("pluviometria.csv", pluviometrias, &total_pluvio)) {
                    mostrar_pluviometria_anual(pluviometrias, total_pluvio); 
                }
   				break;
   			}
			case 9:{
				Temperatura temperaturas[NUM_ANIOS * NUM_MESES];
                int total_temp = 0; 
                if (leer_temperaturas("temperaturas.csv", temperaturas, &total_temp)) {
                    mostrar_temperaturas_mensuales(temperaturas, total_temp, anio); 
                }
   				break;
   			}
			case 10:{
				cambio_de_cuenca(registros, num_registros);
                continue;
   			}
			case 11:{
				printf("Salinedo del programa...\n");
   				break;
   			}
   			default:{
   				printf("Opcion no valida. Escoja una funcionalidad con un numero del 1 al 11.\n");
   				break;
   			}
   		}
   		if (opcion != 11){
   			printf("\nPresione 'Enter' para continuar..");
   			getchar();
   		}
	}while(opcion != 11);
       
    free_string_list(&cuencas);
    free_string_list(&embalses);
    return 0;
}
